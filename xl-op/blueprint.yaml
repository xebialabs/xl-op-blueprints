apiVersion: xl/v2
kind: Blueprint
metadata:
  name: XL OP
  description: |
    This blueprint deploys DAI Deploy operator, DAI Release operator, and XL-k8s-foundation into an existing Kubernetes installation (local single-node Kubernetes, on-premises multi-node Kubernetes cluster, or Amazon EKS cluster).
  author: Digital.ai
  version: 1.0
spec:
  parameters:
    - name: ServerType
      type: Select
      prompt: Product server you want to perform upgrade for
      options:
        - label: Digital.ai Release
          value: daiRelease
        - label: Digital.ai Deploy
          value: daiDeploy
      saveInXlvals: true
      description: Product server you want to perform upgrade for?
    - name: RepositoryName
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Enter the repository name (eg: <repositoryName> from <repositoryName>/<imageName>:<tagName>)"
      default: xebialabsunsupported
      description: Enter the repository name to use
    - name: ImageNameDeploy
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr ServerType == 'daiDeploy'
      prompt: "Enter the deploy server image name (eg: <imageName> from <repositoryName>/<imageName>:<tagName>)"
      default: xl-deploy
      description: Enter the deploy server image name to use
    - name: ImageNameRelease
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr ServerType == 'daiRelease'
      prompt: "Enter the image name (eg: <imageName> from <repositoryName>/<imageName>:<tagName>)"
      default: xl-release
      description: Enter the image name to use
    - name: ImageTag
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Enter the image tag (eg: <tagName> from <repositoryName>/<imageName>:<tagName>)"
      default: 22.3.0-628.113
      description: Enter the image tag to use
    - name: ImageNameDeployTaskEngine
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr "ServerType == 'daiDeploy' && !regex('^10.*$', ImageTag)"
      prompt: "Enter the deploy task engine image name for version 22 and above (eg: <imageName> from <repositoryName>/<imageName>:<tagName>)"
      default: deploy-task-engine
      description: Enter the deploy task engine image name to use
    - name: XldMasterCount
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr "ServerType == 'daiDeploy' && ProcessType == 'install'"
      prompt: "Enter the deploy master server replica count"
      default: 3
      description: Enter the deploy master server replica count
    - name: XldWorkerCount
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr "ServerType == 'daiDeploy' && ProcessType == 'install'"
      prompt: "Enter the deploy worker replica count"
      default: 3
      description: Enter the deploy worker replica count
    - name: XlrReplicaCount
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr "ServerType == 'daiRelease' && ProcessType == 'install'"
      prompt: "Enter the release server replica count"
      default: 3
      description: Enter the release server replica count
    - name: IngressType
      type: Select
      prompt: Select between supported ingress types
      options:
        - label: NGINX
          value: nginx
        - label: HAProxy
          value: haproxy
        - label: None
          value: none
      promptIf: !expr ProcessType == "install"
      saveInXlvals: true
      default: !expr "K8sSetup == 'PlainK8SCluster' ? 'none' : 'nginx'"
      description: Select between supported ingress types?
    - name: EnableOidc
      type: Confirm
      default: true
      saveInXlvals: true
      prompt: "Do you want to enable an oidc?"
      description: "Enable OIDC."
    - name: UseExistingOidcConf
      type: Confirm
      default: !expr "EnableOidc == true"
      overrideDefault: true
      saveInXlvals: true
      promptIf: !expr "EnableOidc == true"
      prompt: "Do you want to use an existing external oidc configuration from previous installation?"
      description: "Use an already existing external oidc configuration from previous installation."
    - name: UseEmbeddedKeycloak
      type: Confirm
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr "!regex('^10.*$', ImageTag) && EnableOidc == true && !UseExistingOidcConf"
      prompt: Use embedded keycloak?
      default: !expr "!regex('^10.*$', ImageTag) && !UseExistingOidcConf"
      description: "If true, keycloak will be installed in kubernetes cluster with predefined configuration."
    - name: UseExternalOidcConf
      type: Editor
      prompt: Configure external oidc setup.
      promptIf: !expr "EnableOidc == true && !UseExistingOidcConf && UseEmbeddedKeycloak == false"
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      default: |-
        .spec.oidc.external=true
        .spec.oidc.accessTokenUri=null
        .spec.oidc.clientId=null
        .spec.oidc.clientSecret=null
        .spec.oidc.emailClaim=null
        .spec.oidc.fullNameClaim=null
        .spec.oidc.issuer=null
        .spec.oidc.keyRetrievalUri=null
        .spec.oidc.logoutUri=null
        .spec.oidc.postLogoutRedirectUri=null
        .spec.oidc.redirectUri=null
        .spec.oidc.rolesClaim=null
        .spec.oidc.userAuthorizationUri=null
        .spec.oidc.userNameClaim=null
    - name: KeycloakUrl
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr "EnableOidc == true && !UseExistingOidcConf && UseEmbeddedKeycloak == true"
      prompt: Enter Keycloak public URL
      description: Enter Keycloak public URL that will be used for keycloak installation.
    - name: UseKeycloakWithEmbeddedDB
      type: Confirm
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      promptIf: !expr "EnableOidc == true && !UseExistingOidcConf && UseEmbeddedKeycloak == true"
      prompt: Use embedded DB for keycloak?
      default: true
      description: "If true, keycloak will be installed in kubernetes cluster with embedded DB. If false, we need to use the custom zip options and update cr yaml file with external DB for keycloak"
    - name: UpgradeType
      type: Select
      prompt: Select the type of upgrade you want.
      ignoreIfSkipped: true
      options:
        - label: Operator to Operator
          value: operatorToOperator
        - label: Helm to Operator
          value: helmToOperator
      promptIf: !expr ProcessType == "upgrade"
      saveInXlvals: true
      description: Type of upgrade you want?
    - name: OperatorImageDeployGeneric
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Enter the operator image to use (eg: <repositoryName>/<imageName>:<tagName>)"
      promptIf: !expr ServerType == 'daiDeploy' && K8sSetup != 'Openshift'
      default: xebialabsunsupported/deploy-operator:22.3.0-713.113
      description: Enter the operator image to use
    - name: OperatorImageDeployOpenshift
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Enter the operator image to use (eg: <repositoryName>/<imageName>:<tagName>)"
      promptIf: !expr ServerType == 'daiDeploy' && K8sSetup == 'Openshift'
      default: xebialabsunsupported/deploy-operator:22.3.0-713.113-openshift
      description: Enter the operator image to use
    - name: OperatorImageReleaseGeneric
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Enter the operator image to use (eg: <repositoryName>/<imageName>:<tagName>)"
      promptIf: !expr ServerType == 'daiRelease' && K8sSetup != 'Openshift'
      default: xebialabsunsupported/release-operator:22.3.0-713.113
      description: Enter the operator image to use
    - name: OperatorImageReleaseOpenshift
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Enter the operator image to use (eg: <repositoryName>/<imageName>:<tagName>)"
      promptIf: !expr ServerType == 'daiRelease' && K8sSetup == 'Openshift'
      default: xebialabsunsupported/release-operator:22.3.0-713.113-openshift
      description: Enter the operator image to use
    - name: License
      type: Editor
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Provide license file for the server
      promptIf: !expr ProcessType == "install"
      description: Provide license file for the server
    - name: RepositoryKeystore
      type: Editor
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Provide repository keystore for the server
      promptIf: !expr ProcessType == "install"
      description: Provide repository keystore for the server
    - name: KeystorePassphrase
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Provide keystore passphrase
      promptIf: !expr ProcessType == "install"
      description: Keystore passphrase for the server
    - name: StorageClass
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Provide storage class for the server
      promptIf: !expr ProcessType == "install"
      description: Provide storage class for the server
    - name: IngressHost
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Provide DNS name for accessing UI of the server
      promptIf: !expr ProcessType == "install"
      description: Provide DNS name for accessing UI of the server
    - name: EnablePostgresql
      type: Confirm
      default: true
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Do you want to enable an PostgreSQL?"
      promptIf: !expr ProcessType == "install"
      description: "Enable PostgreSQL."
    - name: PostgresqlStorageClass
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Provide Storage Class to be defined for PostgreSQL
      default: !expr StorageClass
      promptIf: !expr ProcessType == "install" && EnablePostgresql
      description: Provide Storage Class to be defined for PostgreSQL
    - name: EnableRabbitmq
      type: Confirm
      default: true
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: "Do you want to enable an RabbitMQ?"
      promptIf: !expr ProcessType == "install"
      description: "Enable RabbitMQ."
    - name: RabbitmqReplicaCount
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Replica count to be defined for RabbitMQ
      default: 3
      promptIf: !expr ProcessType == "install" && EnableRabbitmq
      description: Replica count to be defined for RabbitMQ
    - name: RabbitmqStorageClass
      type: Input
      saveInXlvals: true
      ignoreIfSkipped: true
      overrideDefault: true
      prompt: Storage Class to be defined for RabbitMQ
      default: !expr StorageClass
      promptIf: !expr ProcessType == "install" && EnableRabbitmq
      description: Storage Class to be defined for RabbitMQ
    - name: CrdName
      type: Input
      saveInXlvals: true
      promptIf: !expr UpgradeType == 'operatorToOperator'
      prompt: Enter the name of custom resource definition.
      ignoreIfSkipped: true
      overrideDefault: true
      description: The name of your custom resource definition.
    - name: CrName
      type: Input
      saveInXlvals: true
      promptIf: !expr UpgradeType == 'operatorToOperator'
      prompt: Enter the name of custom resource.
      ignoreIfSkipped: true
      overrideDefault: true
      description: The name of your custom resource
    - name: PreserveCrValuesDeploy
      type: Editor
      prompt: Edit list of custom resource keys that will migrate to the new Deploy CR
      promptIf: !expr ServerType == 'daiDeploy' && ProcessType == "upgrade"
      saveInXlvals: true
      ignoreIfSkipped: true
      description: "For all matched expressions in the cluster CR, the values will be migrated to the upgraded Deploy CR"
      default: |-
        .metadata.name
        .spec.XldMasterCount
        .spec.XldWorkerCount
        .spec.UseExistingDB.Enabled
        .spec.UseExistingMQ.Enabled
        .spec.ingress.hosts
        .spec.KeystorePassphrase
        .spec.Persistence.StorageClass
        .spec.Persistence.XldMasterPvcSize
        .spec.Persistence.XldWorkerPvcSize
        .spec.RepositoryKeystore
        .spec.postgresql.persistence.size
        .spec.postgresql.persistence.storageClass
        .spec.postgresql.postgresqlMaxConnections
        .spec.keycloak.postgresql.persistence.size
        .spec.keycloak.postgresql.postgresqlMaxConnections
        .spec.haproxy-ingress.install
        .spec.keycloak.install
        .spec.nginx-ingress-controller.install
        .spec.postgresql.install
        .spec.rabbitmq.install
        .spec.oidc.enabled
        .spec.rabbitmq.persistence.storageClass
        .spec.rabbitmq.persistence.size
        .spec.rabbitmq.replicaCount
        .spec.rabbitmq.persistence.replicaCount
        .spec.route.hosts
        .spec.xldLicense
        .spec.centralConfiguration.image.repository      
        .spec.centralConfiguration.persistence.pvcSize
        .spec.centralConfiguration.migrateFromEmbedded
        .spec.deploy.configurationManagement
    - name: PreserveCrValuesRelease
      type: Editor
      prompt: Edit list of custom resource keys that will migrate to the new Release CR
      promptIf: !expr ServerType == 'daiRelease' && ProcessType == "upgrade"
      saveInXlvals: true
      ignoreIfSkipped: true
      description: For all matched expressions in the cluster CR, the values will be migrated to the upgraded Release CR
      default: |-
        .metadata.name
        .spec.replicaCount
        .spec.UseExistingDB.Enabled
        .spec.UseExistingMQ.Enabled
        .spec.ingress.hosts
        .spec.KeystorePassphrase
        .spec.Persistence.Size
        .spec.Persistence.StorageClass
        .spec.RepositoryKeystore
        .spec.postgresql.persistence.size
        .spec.postgresql.persistence.storageClass
        .spec.postgresql.postgresqlMaxConnections
        .spec.keycloak.postgresql.persistence.size
        .spec.keycloak.postgresql.postgresqlMaxConnections
        .spec.haproxy-ingress.install
        .spec.rabbitmq.install
        .spec.keycloak.install
        .spec.nginx-ingress-controller.install
        .spec.postgresql.install
        .spec.rabbitmq.install
        .spec.oidc.enabled
        .spec.rabbitmq.persistence.storageClass
        .spec.rabbitmq.persistence.size
        .spec.rabbitmq.replicaCount
        .spec.rabbitmq.persistence.replicaCount
        .spec.rabbitmq.persistence.storageClass
        .spec.route.hosts
        .spec.xlrLicense
        .spec.release.configurationManagement
    - name: ReleaseName
      type: Input
      saveInXlvals: true
      promptIf: !expr UpgradeType == 'helmToOperator'
      prompt: Enter the helm release name.
      ignoreIfSkipped: true
      overrideDefault: true
      description: The name of your custom resource definition.
  files:
    # Deploy
    - path: digitalai/dai-deploy/kubernetes-generic/template/cluster-role-digital-proxy-role.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy'
    - path: digitalai/dai-deploy/kubernetes-generic/template/cluster-role-manager-role.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup != 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-generic/template/cluster-role-metrics-reader.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy'
    - path: digitalai/dai-deploy/kubernetes-generic/template/controller-manager-metrics-service.yaml
      writeIf: !expr ServerType == 'daiDeploy'
    - path: digitalai/dai-deploy/kubernetes-generic/template/custom-resource-definition.yaml
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup != 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-generic/daideploy_cr_default.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup != 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-generic/template/leader-election-role.yaml
      writeIf: !expr ServerType == 'daiDeploy'
    - path: digitalai/dai-deploy/kubernetes-generic/template/leader-election-rolebinding.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy'
    - path: digitalai/dai-deploy/kubernetes-generic/template/manager-rolebinding.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy'
    - path: digitalai/dai-deploy/kubernetes-generic/template/proxy-rolebinding.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy'
    - path: digitalai/dai-deploy/kubernetes-generic/template/deployment.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup != 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-generic/template/create-keycloak-db.yaml
      writeIf: !expr ServerType == 'daiDeploy' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup != 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-generic/template/postgresql-init-keycloak-db.yaml
      writeIf: !expr ServerType == 'daiDeploy' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup != 'Openshift'
    # Deploy OpenShift
    - path: digitalai/dai-deploy/kubernetes-openshift/template/cluster-role-manager-role.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup == 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-openshift/template/custom-resource-definition.yaml
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup == 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-openshift/daideploy_cr_default.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup == 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-openshift/template/deployment.yaml.tmpl
      writeIf: !expr ServerType == 'daiDeploy' && K8sSetup == 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-openshift/template/create-keycloak-db.yaml
      writeIf: !expr ServerType == 'daiDeploy' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup == 'Openshift'
    - path: digitalai/dai-deploy/kubernetes-openshift/template/postgresql-init-keycloak-db.yaml
      writeIf: !expr ServerType == 'daiDeploy' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup == 'Openshift'
    # Release
    - path: digitalai/dai-release/kubernetes-generic/template/cluster-role-digital-proxy-role.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease'
    - path: digitalai/dai-release/kubernetes-generic/template/cluster-role-manager-role.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup != 'Openshift'
    - path: digitalai/dai-release/kubernetes-generic/template/cluster-role-metrics-reader.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease'
    - path: digitalai/dai-release/kubernetes-generic/template/controller-manager-metrics-service.yaml
      writeIf: !expr ServerType == 'daiRelease'
    - path: digitalai/dai-release/kubernetes-generic/template/custom-resource-definition.yaml
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup != 'Openshift'
    - path: digitalai/dai-release/kubernetes-generic/dairelease_cr_default.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup != 'Openshift'
    - path: digitalai/dai-release/kubernetes-generic/template/leader-election-role.yaml
      writeIf: !expr ServerType == 'daiRelease'
    - path: digitalai/dai-release/kubernetes-generic/template/leader-election-rolebinding.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease'
    - path: digitalai/dai-release/kubernetes-generic/template/manager-rolebinding.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease'
    - path: digitalai/dai-release/kubernetes-generic/template/proxy-rolebinding.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease'
    - path: digitalai/dai-release/kubernetes-generic/template/deployment.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup != 'Openshift'
    - path: digitalai/dai-release/kubernetes-generic/template/create-keycloak-db.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup != 'Openshift'
    - path: digitalai/dai-release/kubernetes-generic/template/postgresql-init-keycloak-db.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup != 'Openshift'
    # Release OpenShift
    - path: digitalai/dai-release/kubernetes-openshift/template/cluster-role-manager-role.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup == 'Openshift'
    - path: digitalai/dai-release/kubernetes-openshift/template/custom-resource-definition.yaml
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup == 'Openshift'
    - path: digitalai/dai-release/kubernetes-openshift/dairelease_cr_default.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup == 'Openshift'
    - path: digitalai/dai-release/kubernetes-openshift/template/deployment.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && K8sSetup == 'Openshift'
    - path: digitalai/dai-release/kubernetes-openshift/template/create-keycloak-db.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup == 'Openshift'
    - path: digitalai/dai-release/kubernetes-openshift/template/postgresql-init-keycloak-db.yaml.tmpl
      writeIf: !expr ServerType == 'daiRelease' && EnableOidc == true && UseEmbeddedKeycloak == true && K8sSetup == 'Openshift'
    # Generic
    - path: generated_answers.yaml.tmpl
