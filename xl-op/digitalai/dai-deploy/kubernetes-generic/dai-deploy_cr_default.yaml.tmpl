apiVersion: xld.digital.ai/v1alpha1
kind: DigitalaiDeploy
metadata:
  {{- if eq .K8sSetup "Openshift" }}
  {{- if eq .UseCustomNamespace true }}
  name: dai-ocp-xld-{{ .Namespace }}
  {{- else }}
  name: dai-ocp-xld
  {{- end }}
  {{- else }}
  {{- if eq .UseCustomNamespace true }}
  name: dai-xld-{{ .Namespace }}
  {{- else }}
  name: dai-xld
  {{- end }}
  {{- end }}
spec:
  global:
    {{- if eq .IsCustomImageRegistry true }}
    imageRegistry: {{ .CustomImageRegistryName }}
    {{- end }}
    {{- if eq .ImageRegistryType "private" }}
    imagePullSecrets:
      - {{ .CustomPrivateImageRegistrySecret }}
    {{- end }}
    storageClass: "{{ .StorageClass }}"
  k8sSetup:
    platform: {{ .K8sSetup }}
  auth:
    adminPassword: "{{ .AdminPassword }}"
  {{- if eq .LicenseSource "generate" }}
  licenseAcceptEula: true
  {{- else }}
  license: |-
{{ .License | trim | indent 4 }}
  {{- end }}
  keystore:
    passphrase: "{{ .KeystorePassphrase }}"
    keystore: |- 
{{ .RepositoryKeystore | trim | indent 6 }}"
  external:
    db:
      {{- if eq .EnablePostgresql false }}
      enabled: true
{{ .PostgresqlExternalConfigDeploy | indent 4 }}
      {{- else }}
      enabled: false
      {{- end }}
    mq:
      {{- if eq .EnableRabbitmq false }}
      enabled: true
{{ .RabbitmqExternalConfigDeploy | indent 4 }}
      {{- else }}
      enabled: false
      {{- end }}
  oidc:
    enabled: {{ not (eq .OidcConfigType "no-oidc") }}
{{ .ExternalOidcConf | indent 4 }}

  centralConfiguration:
    replicaCount: 1
    persistence:
      accessModes:
        - {{ .AccessModeDeploy }}
      size: {{ .PvcSizeCc }}Gi
    image:
      repository: {{ .RepositoryName }}/{{ .ImageNameCc }}
      tag: "{{ .ImageTag }}"
    diagnosticMode:
      enabled: false

  master:
    replicaCount: {{ .XldMasterCount }}
    persistence:
      accessModes:
        - {{ .AccessModeDeploy }}
      size: {{ .PvcSizeDeploy }}Gi
    image:
      repository: {{ .RepositoryName }}/{{ .ImageNameDeploy }}
      tag: "{{ .ImageTag }}"
    diagnosticMode:
      enabled: false

  worker:
    replicaCount: {{ .XldWorkerCount }}
    persistence:
      accessModes:
        - {{ .AccessModeDeploy }}
      size: {{ .PvcSizeDeployTaskEngine }}Gi
    image:
      repository: {{ .RepositoryName }}/{{ .ImageNameDeployTaskEngine }}
      tag: "{{ .ImageTag }}"
    diagnosticMode:
      enabled: false

  {{- if eq .IsCustomImageRegistry true }}
  busyBox:
    image:
      repository: {{ .RepositoryName }}/busybox
  {{- end }}

  ingress:
    {{- if eq .IngressType "nginx" }}
    enabled: true
    annotations:
      {{- if eq .UseCustomNamespace true }}
      kubernetes.io/ingress.class: nginx-dai-xld-{{ .Namespace }}
      {{- else }}
      kubernetes.io/ingress.class: nginx-dai-xld
      {{- end }}
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/session-cookie-name: JSESSIONID
      nginx.ingress.kubernetes.io/ssl-redirect: "{{ .EnableIngressTls }}"
    {{- end }}
    {{- if eq .IngressType "haproxy" }}
    enabled: true
    annotations:
      {{- if eq .UseCustomNamespace true }}
      kubernetes.io/ingress.class: haproxy-dai-xld-{{ .Namespace }}
      {{- else }}
      kubernetes.io/ingress.class: haproxy-dai-xld
      {{- end }}
      ingress.kubernetes.io/rewrite-target: /
      ingress.kubernetes.io/affinity: cookie
      ingress.kubernetes.io/session-cookie-name: JSESSIONID
      ingress.kubernetes.io/session-cookie-strategy: prefix
      ingress.kubernetes.io/config-backend: |
        option httpchk GET /ha/health HTTP/1.0
      ingress.kubernetes.io/ssl-redirect: "{{ .EnableIngressTls }}"
    {{- end }}
    {{- if eq .IngressType "external" }}
    enabled: true
    annotations:
      kubernetes.io/ingress.class: {{ .ExternalIngressClass }}
      ingress.kubernetes.io/rewrite-target: /
      ingress.kubernetes.io/affinity: cookie
      ingress.kubernetes.io/session-cookie-name: SESSION_XLD
      ingress.kubernetes.io/session-cookie-strategy: prefix
      ingress.kubernetes.io/config-backend: |
        option httpchk GET /ha/health HTTP/1.0
      ingress.kubernetes.io/ssl-redirect: "{{ .EnableIngressTls }}"
    {{- end }}
    {{- if eq .IngressType "none" }}
    enabled: false
    {{- end }}
    hostname: "{{ .IngressHost }}"
    path: /
    {{- if eq .EnableIngressTls true }}
    # If you want to use TLS configuration uncomment the following lines and provide correct values.
    # You need to create secret, and provide the name under "secretName"
    tls: true
    extraTls:
      - hosts:
          - "{{ .IngressHost }}"
        secretName: "{{ .IngressTlsSecretName }}"
    {{- end }}
  route:
    {{- if eq .IngressType "route" }}
    enabled: true
    annotations:
      haproxy.router.openshift.io/cookie_name: JSESSIONID
      haproxy.router.openshift.io/disable_cookies: "false"
      haproxy.router.openshift.io/rewrite-target: /
    hosts:
      - "{{ .IngressHost }}"
    {{- else }}
    enabled: false
    {{- end }}
  haproxy-ingress:
    {{- if eq .IsCustomImageRegistry true }}
    image:
      repository: {{ .CustomImageRegistryName }}/{{ .RepositoryName }}/haproxy-ingress
    {{- end }}
    {{- if eq .ImageRegistryType "private" }}
    imagePullSecrets:
        - name: {{ .CustomPrivateImageRegistrySecret }}
    {{- end }}
    {{- if eq .UseCustomNamespace true }}
    ingressClass: haproxy-dai-xld-{{ .Namespace }}
    {{- else }}
    ingressClass: haproxy-dai-xld
    {{- end }}
    {{- if eq .IngressType "haproxy" }}
    install: true
    {{- else }}
    install: false
    {{- end }}
  nginx-ingress-controller:
    {{- if eq .IsCustomImageRegistry true }}
    image:
      {{- /* registry name defined in global section */}}
      repository: {{ .RepositoryName }}/nginx
    {{- end }}
    {{- if eq .UseCustomNamespace true }}
    extraArgs:
      ingress-class: "nginx-dai-xld-{{ .Namespace }}"
    {{- else }}
    extraArgs:
      ingress-class: nginx-dai-xld
    {{- end }}
    {{- if or (eq .IsCustomImageRegistry true) (eq .ImageRegistryType "private") }}
    global:
      {{- /* global overrides the other occurences */}}
      {{- if eq .IsCustomImageRegistry true }}
      imageRegistry: {{ .CustomImageRegistryName }}
      {{- end }}
      {{- if eq .ImageRegistryType "private" }}
      imagePullSecrets: [ {{ .CustomPrivateImageRegistrySecret }} ]
      {{- end }}
    {{- end }}
    {{- if eq .IsCustomImageRegistry true }}
    image:
      {{- /* registry name defined in global section */}}
      repository: {{ .RepositoryName }}/nginx-ingress-controller
    {{- end }}
    {{- if eq .UseCustomNamespace true }}
    ingressClassResource:
      controllerClass: k8s.io/ingress-nginx-dai-xld-{{ .Namespace }}
      name: nginx-dai-xld-{{ .Namespace }}
    {{- else }}
    ingressClassResource:
      controllerClass: k8s.io/ingress-nginx-dai-xld
      name: nginx-dai-xld
    {{- end }}
    {{- if eq .IngressType "nginx" }}
    install: true
    {{- else }}
    install: false
    {{- end }}
  postgresql:
    global:
      {{- /*  global overrides the other occurences */}}
        {{- if eq .IsCustomImageRegistry true }}
        imageRegistry: {{ .CustomImageRegistryName }}
        {{- end }}
        {{- if eq .ImageRegistryType "private" }}
        imagePullSecrets:
          - {{ .CustomPrivateImageRegistrySecret }}
        {{- end }}
        storageClass: "{{ .PostgresqlStorageClass }}"
    {{- if eq .IsCustomImageRegistry true }}
    image:
      {{- /* registry name defined in global section */}}
      repository: {{ .RepositoryName }}/postgresql
    {{- end }}
    install: {{ .EnablePostgresql }}
    primary:
      persistence:
        size: {{ .PostgresqlPvcSize }}Gi
    securityContext:
      enabled: true
      fsGroup: 1001
  rabbitmq:
    {{- if or (eq .IsCustomImageRegistry true) (eq .ImageRegistryType "private") }}
    global:
      {{- /* global overrides the other occurences */}}
      {{- if eq .IsCustomImageRegistry true }}
      imageRegistry: {{ .CustomImageRegistryName }}
      {{- end }}
      {{- if eq .ImageRegistryType "private" }}
      imagePullSecrets:
        - {{ .CustomPrivateImageRegistrySecret }}
      {{- end }}
    {{- end }}
    {{- if eq .IsCustomImageRegistry true }}
    image:
      {{- /* registry name defined in global section */}}
      repository: {{ .RepositoryName }}/rabbitmq
    {{- end }}
    install: {{ .EnableRabbitmq }}
    persistence:
      size: {{ .RabbitmqPvcSize }}Gi
      storageClass: {{ .RabbitmqStorageClass }}
    replicaCount: {{ .RabbitmqReplicaCount }}
    volumePermissions:
      enabled: true
      {{- if eq .IsCustomImageRegistry true }}
      image:
        {{- /* registry name defined in global section */}}
        repository: {{ .RepositoryName }}/bitnami-shell
      {{- end }}
    securityContext:
      enabled: true
      fsGroup: 1001
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
