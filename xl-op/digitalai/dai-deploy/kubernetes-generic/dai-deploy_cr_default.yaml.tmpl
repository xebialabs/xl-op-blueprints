apiVersion: xld.digital.ai/v1alpha1
kind: DigitalaiDeploy
metadata:
  {{- if eq .K8sSetup "Openshift" }}
  {{- if eq .UseCustomNamespace true }}
  name: dai-ocp-xld-{{ .Namespace }}
  {{- else }}
  name: dai-ocp-xld
  {{- end }}
  {{- else }}
  {{- if eq .UseCustomNamespace true }}
  name: dai-xld-{{ .Namespace }}
  {{- else }}
  name: dai-xld
  {{- end }}
  {{- end }}
spec:
  {{- if eq .IsCustomImageRegistry true }}
  global:
    imageRegistry: {{ .CustomImageRegistryName }}
    {{- if eq .ImageRegistryType "private" }}
    imagePullSecrets:
      - {{ .CustomPrivateImageRegistrySecret }}
    {{- end }}
  {{- end }}
  k8sSetup:
    platform: {{ .K8sSetup }}
  auth:
    adminPassword: "{{ .AdminPassword }}"
  {{- if eq .LicenseSource "generate" }}
  licenseAcceptEula: true
  {{- else }}
  license: |-
{{ .License | trim | indent 4 }}
  {{- end }}
  keystore:
    passphrase: {{ .KeystorePassphrase | quote }}
    keystore: |- 
{{ .RepositoryKeystore | trim | indent 6 }}"
  external:
    db:
      {{- if eq .EnablePostgresql false }}
      enabled: true
{{ .PostgresqlExternalConfigDeploy | indent 6 }}
      {{- else }}
      enabled: false
      {{- end }}
    mq:
      {{- if eq .EnableRabbitmq false }}
      enabled: true
{{ .RabbitmqExternalConfigDeploy | indent 6 }}
      {{- else }}
      enabled: false
      {{- end }}
  oidc:
    enabled: {{ not (eq .OidcConfigType "no-oidc") }}
{{ .ExternalOidcConf | indent 4 }}
  {{- if eq .HttpProtocolDeploy "https" }}
  ssl:
    enabled: true
    keystorePassword: {{ .ApplicationKeystorePassword | quote }}
    keystoreKeypassword: {{ .ApplicationKeystorePassword | quote }}
    keystoreType: {{ .ApplicationKeystoreType }}
    {{- if eq .ApplicationKeystoreSource "secret" }}
    keystore:
      valueFrom:
        secretKeyRef:
          name: {{ .ApplicationKeystoreSecretName }}
          key: ssl-keystore.{{ .ApplicationKeystoreType }}
    {{- else }}
    {{- if or (eq .ApplicationKeystoreSource "editor") (eq .ApplicationKeystoreSource "file") }}
    keystore: |-
{{ .ApplicationKeystore | indent 6 }}
    {{- end }}
    {{- end }}
  {{- end }}
  hooks:
    genSelfSigned:
      {{- if and (eq .ApplicationKeystoreSource "generate") (eq .HttpProtocolDeploy "https") }}  
      enabled: true
      {{- else }}
      enabled: false
      {{- end }}
      {{- if eq .IsCustomImageRegistry true }}
      image:
        registry: {{ .CustomImageRegistryName }}
        repository: {{ .RepositoryName }}/kubectl
      {{- end }}
    getLicense:
      {{- if eq .LicenseSource "generate" }}
      enabled: true
      {{- else }}
      enabled: false
      {{- end }}
      {{- if eq .IsCustomImageRegistry true }}
      image:
        registry: {{ .CustomImageRegistryName }}
        repository: {{ .RepositoryName }}/kubectl
      {{- end }}

  centralConfiguration:
    replicaCount: 1
    image:
      repository: {{ .RepositoryName }}/{{ .ImageNameCc }}
      tag: "{{ .ImageTag }}"
      pullPolicy: IfNotPresent
    diagnosticMode:
      enabled: false
    {{- if eq .ResourcesSource "preset" }}
    resourcesPreset: {{ .ResourcesPresetDeployCc }}
    {{- end }}
    {{- if eq .ResourcesSource "editor" }}
{{ .ResourcesEditorDeployCc | indent 4 }}
    {{- else }}
    resources: {}
    {{- end }}

  master:
    replicaCount: {{ .XldMasterCount }}
    persistence:
      storageClass: "{{ .StorageClass }}"
      accessModes:
        - {{ .AccessModeDeploy }}
      size: {{ .PvcSizeDeploy }}Gi
    volumePermissions:
      enabled: false
    image:
      repository: {{ .RepositoryName }}/{{ .ImageNameDeploy }}
      tag: "{{ .ImageTag }}"
      pullPolicy: IfNotPresent
    diagnosticMode:
      enabled: false
    {{- if eq .ResourcesSource "preset" }}
    resourcesPreset: {{ .ResourcesPresetDeploy }}
    {{- end }}
    {{- if eq .ResourcesSource "editor" }}
{{ .ResourcesEditorDeploy | indent 4 }}
    {{- else }}
    resources: {}
    {{- end }}

  worker:
    replicaCount: {{ .XldWorkerCount }}
    persistence:
      storageClass: "{{ .StorageClass }}"
      accessModes:
        - {{ .AccessModeDeploy }}
      size: {{ .PvcSizeDeployTaskEngine }}Gi
    volumePermissions:
      enabled: false
    image:
      repository: {{ .RepositoryName }}/{{ .ImageNameDeployTaskEngine }}
      tag: "{{ .ImageTag }}"
      pullPolicy: IfNotPresent
    diagnosticMode:
      enabled: false
    {{- if eq .ResourcesSource "preset" }}
    resourcesPreset: {{ .ResourcesPresetDeployTaskEngine }}
    {{- end }}
    {{- if eq .ResourcesSource "editor" }}
{{ .ResourcesEditorDeployTaskEngine | indent 4 }}
    {{- else }}
    resources: {}
    {{- end }}    

  {{- if eq .IsCustomImageRegistry true }}
  busyBox:
    image:
      registry: {{ .CustomImageRegistryName }}
      repository: {{ .RepositoryName }}/busybox
  {{- end }}

  ingress:
    {{- if eq .IngressType "nginx" }}
    enabled: true
    annotations:
      {{- if eq .UseCustomNamespace true }}
      kubernetes.io/ingress.class: nginx-dai-xld-{{ .Namespace }}
      {{- else }}
      kubernetes.io/ingress.class: nginx-dai-xld
      {{- end }}
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/session-cookie-name: ROUTE
      {{- if eq .HttpProtocolDeploy "https" }}
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      {{- end }}
      {{- if eq .HttpProtocolIngress "https" }}
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      {{- else }}
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
      {{- end }}
      {{- if eq .IngressKeystoreSource "passthrough" }}
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      {{- end }}
    {{- end }}
    {{- if eq .IngressType "haproxy" }}
    enabled: true
    annotations:
      {{- if eq .UseCustomNamespace true }}
      kubernetes.io/ingress.class: haproxy-dai-xld-{{ .Namespace }}
      {{- else }}
      kubernetes.io/ingress.class: haproxy-dai-xld
      {{- end }}
      ingress.kubernetes.io/rewrite-target: /
      ingress.kubernetes.io/affinity: cookie
      ingress.kubernetes.io/session-cookie-name: SESSION_XLD
      ingress.kubernetes.io/session-cookie-strategy: prefix
      ingress.kubernetes.io/timeout-client: "120s"
      ingress.kubernetes.io/timeout-http-request: "120s"
      {{- if eq .HttpProtocolDeploy "https" }}
      ingress.kubernetes.io/config-backend: |
        option httpchk GET / HTTP/1.0
        http-check send hdr Host {{ .IngressHost }}
      haproxy-ingress.github.io/backend-protocol: "h1-ssl"
      haproxy-ingress.github.io/secure-backends: "true"
      haproxy-ingress.github.io/secure-sni: host
      {{- else }}
      haproxy-ingress.github.io/config-backend: |
        option httpchk GET /ha/health HTTP/1.0
      {{- end }}
      {{- if eq .HttpProtocolIngress "https" }}
      haproxy-ingress.github.io/ssl-redirect: "true"
      {{- else }}
      haproxy-ingress.github.io/ssl-redirect: "false"
      {{- end }}
      {{- if eq .IngressKeystoreSource "passthrough" }}
      haproxy-ingress.github.io/ssl-passthrough: "true"
      {{- end }}
    {{- end }}
    {{- if eq .IngressType "external" }}
    enabled: true
    annotations:
      kubernetes.io/ingress.class: {{ .ExternalIngressClass }}
      ingress.kubernetes.io/rewrite-target: /
      ingress.kubernetes.io/affinity: cookie
      ingress.kubernetes.io/session-cookie-name: SESSION_XLD
      ingress.kubernetes.io/session-cookie-strategy: prefix
      ingress.kubernetes.io/timeout-client: "120s"
      ingress.kubernetes.io/timeout-http-request: "120s"
      {{- if eq .HttpProtocolDeploy "https" }}
      ingress.kubernetes.io/backend-protocol: "HTTPS"
      {{- end }}
      {{- if eq .HttpProtocolIngress "https" }}
      ingress.kubernetes.io/ssl-redirect: "true"
      {{- else }}
      ingress.kubernetes.io/ssl-redirect: "false"
      {{- end }}
      {{- if eq .IngressKeystoreSource "passthrough" }}
      ingress.kubernetes.io/ssl-passthrough: "true"
      {{- end }}
    {{- end }}
    {{- if eq .IngressType "none" }}
    enabled: false
    {{- end }}
    hostname: "{{ .IngressHost }}"
    path: /
    {{- if and (not (eq .IngressKeystoreSource "passthrough")) (eq .HttpProtocolIngress "https") }}
    # If you want to use TLS configuration uncomment the following lines and provide correct values.
    # You need to create secret, and provide the name under "secretName"
    tls: true
    {{- if eq .IngressKeystoreSource "generate" }}
    selfSigned: true
    {{- end }}
    {{- if eq .IngressKeystoreSource "secret" }}
    extraTls:
      - hosts:
          - "{{ .IngressHost }}"
        secretName: "{{ .IngressTlsSecretName }}"
    {{- end }}
    {{- end }}
  route:
    {{- if eq .IngressType "route" }}
    enabled: true
    annotations:
      haproxy.router.openshift.io/cookie_name: SESSION_XLD
      haproxy.router.openshift.io/disable_cookies: "false"
      haproxy.router.openshift.io/rewrite-target: /
      {{- if and (not (eq .IngressKeystoreSource "passthrough")) (eq .HttpProtocolDeploy "https") }}
      haproxy.router.openshift.io/set-forwarded-headers: replace
      haproxy.router.openshift.io/secure-sni: host
      {{- end }}
    hostname: "{{ .IngressHost }}"
    path: /
    {{- if eq .HttpProtocolIngress "https" }}
    tls:
      enabled: true
      {{- if eq .IngressKeystoreSource "passthrough" }}
      termination: passthrough
      {{- else }}
      termination: edge
      {{- if eq .IngressKeystoreSource "generate" }}
      selfSigned: true
      {{- end }}
      {{- if eq .IngressKeystoreSource "secret" }}
      secretName: "{{ .IngressTlsSecretName }}"
      {{- end }}
      {{- end }}
    {{- end }}
    {{- else }}
    enabled: false
    {{- end }}
  haproxy-ingress:
    controller:
      {{- if eq .IsCustomImageRegistry true }}
      image:
        repository: {{ .CustomImageRegistryName }}/{{ .RepositoryName }}/haproxy-ingress
      {{- end }}
      {{- if eq .ImageRegistryType "private" }}
      imagePullSecrets:
          - name: {{ .CustomPrivateImageRegistrySecret }}
      {{- end }}
      {{- if eq .UseCustomNamespace true }}
      ingressClass: haproxy-dai-xld-{{ .Namespace }}
      {{- else }}
      ingressClass: haproxy-dai-xld
      {{- end }}
    {{- if eq .IngressType "haproxy" }}
    install: true
    {{- else }}
    install: false
    {{- end }}
  nginx-ingress-controller:
    {{- if eq .IsCustomImageRegistry true }}
    defaultBackend:
      image:
        {{- /* registry name defined in global section */}}
        repository: {{ .RepositoryName }}/nginx
    {{- end }}
    {{- if eq .UseCustomNamespace true }}
    extraArgs:
      ingress-class: "nginx-dai-xld-{{ .Namespace }}"
    {{- else }}
    extraArgs:
      ingress-class: nginx-dai-xld
    {{- end }}
    {{- if (eq .IsCustomImageRegistry true) }}
    global:
      {{- /* global overrides the other occurences */}}
      imageRegistry: {{ .CustomImageRegistryName }}
      {{- if eq .ImageRegistryType "private" }}
      imagePullSecrets: [ {{ .CustomPrivateImageRegistrySecret }} ]
      {{- end }}
    {{- end }}
    {{- if eq .IsCustomImageRegistry true }}
    image:
      {{- /* registry name defined in global section */}}
      repository: {{ .RepositoryName }}/nginx-ingress-controller
    {{- end }}
    {{- if eq .UseCustomNamespace true }}
    ingressClassResource:
      controllerClass: k8s.io/ingress-nginx-dai-xld-{{ .Namespace }}
      name: nginx-dai-xld-{{ .Namespace }}
    {{- else }}
    ingressClassResource:
      controllerClass: k8s.io/ingress-nginx-dai-xld
      name: nginx-dai-xld
    {{- end }}
    {{- if eq .IngressType "nginx" }}
    install: true
    {{- else }}
    install: false
    {{- end }}
  postgresql:
    global:
      {{- /*  global overrides the other occurences */}}
      {{- if eq .IsCustomImageRegistry true }}
      imageRegistry: {{ .CustomImageRegistryName }}
      {{- end }}
      {{- if eq .ImageRegistryType "private" }}
      imagePullSecrets:
        - {{ .CustomPrivateImageRegistrySecret }}
      {{- end }}
      storageClass: "{{ .PostgresqlStorageClass }}"
    {{- if eq .IsCustomImageRegistry true }}
    image:
      {{- /* registry name defined in global section */}}
      repository: {{ .RepositoryName }}/postgresql
    {{- end }}
    install: {{ .EnablePostgresql }}
    primary:
      persistence:
        size: {{ .PostgresqlPvcSize }}Gi
        storageClass: "{{ .PostgresqlStorageClass }}"
    securityContext:
      enabled: true
      fsGroup: 1001
    {{- if eq .IsCustomImageRegistry true }}
    volumePermissions:
      image:
        {{- /* registry name defined in global section */}}
        repository: {{ .RepositoryName }}/os-shell
    {{- end }}
  rabbitmq:
    {{- if (eq .IsCustomImageRegistry true) }}
    global:
      {{- /* global overrides the other occurences */}}
      imageRegistry: {{ .CustomImageRegistryName }}
      {{- if eq .ImageRegistryType "private" }}
      imagePullSecrets:
        - {{ .CustomPrivateImageRegistrySecret }}
      {{- end }}
    {{- end }}
    {{- if eq .IsCustomImageRegistry true }}
    image:
      {{- /* registry name defined in global section */}}
      repository: {{ .RepositoryName }}/rabbitmq
    {{- end }}
    install: {{ .EnableRabbitmq }}
    persistence:
      size: {{ .RabbitmqPvcSize }}Gi
      storageClass: {{ .RabbitmqStorageClass }}
    replicaCount: {{ .RabbitmqReplicaCount }}
    volumePermissions:
      enabled: true
      {{- if eq .IsCustomImageRegistry true }}
      image:
        {{- /* registry name defined in global section */}}
        repository: {{ .RepositoryName }}/os-shell
      {{- end }}
    securityContext:
      enabled: true
      fsGroup: 1001
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
